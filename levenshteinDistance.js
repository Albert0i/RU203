function levenshteinDistanceWithChanges(str1, str2) {
    const len1 = str1.length;
    const len2 = str2.length;
    
    const matrix = Array.from({ length: len1 + 1 }, (_, i) => Array.from({ length: len2 + 1 }, (_, j) => ({ distance: 0, changes: [] })));

    for (let i = 1; i <= len1; i++) {
        matrix[i][0].distance = i;
        matrix[i][0].changes.push({ operation: 'Deletion', char: str1[i - 1] });
    }

    for (let j = 1; j <= len2; j++) {
        matrix[0][j].distance = j;
        matrix[0][j].changes.push({ operation: 'Insertion', char: str2[j - 1] });
    }

    for (let i = 1; i <= len1; i++) {
        for (let j = 1; j <= len2; j++) {
            const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;
            const deletion = matrix[i - 1][j].distance + 1;
            const insertion = matrix[i][j - 1].distance + 1;
            const substitution = matrix[i - 1][j - 1].distance + cost;

            if (deletion <= insertion && deletion <= substitution) {
                matrix[i][j].distance = deletion;
                matrix[i][j].changes = [...matrix[i - 1][j].changes, { operation: 'Deletion', char: str1[i - 1] }];
            } else if (insertion <= deletion && insertion <= substitution) {
                matrix[i][j].distance = insertion;
                matrix[i][j].changes = [...matrix[i][j - 1].changes, { operation: 'Insertion', char: str2[j - 1] }];
            } else {
                matrix[i][j].distance = substitution;
                if (cost === 1) {
                    matrix[i][j].changes = [...matrix[i - 1][j - 1].changes, { operation: 'Substitution', from: str1[i - 1], to: str2[j - 1] }];
                } else {
                    matrix[i][j].changes = matrix[i - 1][j - 1].changes;
                }
            }
        }
    }

    return matrix[len1][len2];
}

// Test the function
const result = levenshteinDistanceWithChanges("kitten", "sitting");
console.log(result.distance); 
console.log(result.changes); 
/*
3
[
  { operation: 'Substitution', from: 'k', to: 's' },
  { operation: 'Substitution', from: 'e', to: 'i' },
  { operation: 'Insertion', char: 'g' }
]
*/

// Test the function
const result2 = levenshteinDistanceWithChanges("The Adolescent", "Fyodor Dostoevsky");
console.log(result2.distance); 
console.log(result2.changes); 
/*
15
[
  { operation: 'Substitution', from: 'T', to: 'F' },
  { operation: 'Substitution', from: 'h', to: 'y' },
  { operation: 'Substitution', from: 'e', to: 'o' },
  { operation: 'Deletion', char: ' ' },
  { operation: 'Deletion', char: 'A' },
  { operation: 'Substitution', from: 'l', to: 'r' },
  { operation: 'Substitution', from: 'e', to: ' ' },
  { operation: 'Insertion', char: 'D' },
  { operation: 'Insertion', char: 'o' },
  { operation: 'Substitution', from: 'c', to: 't' },
  { operation: 'Insertion', char: 'o' },
  { operation: 'Substitution', from: 'n', to: 'v' },
  { operation: 'Substitution', from: 't', to: 's' },
  { operation: 'Insertion', char: 'k' },
  { operation: 'Insertion', char: 'y' }
]
*/

/*
   Generated by Chat-GPT
*/